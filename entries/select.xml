<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="select" namespace="fn" type="Widget" widgetnamespace="mobile">
    <desc>Creates a select menu widget</desc>
    <longdesc>
        <p>The select menu is based on a native select element, which is hidden from view and replaced with a custom-styled select button that matches the look and feel of the jQuery Mobile framework. The select menu is ARIA-enabled and keyboard accessible on the desktop as well.</p>
        <p>By default, the framework leverages the native OS options menu to use with the custom button. When the button is clicked, the native OS menu will open. When a value is selected and the menu closes, the custom button's text is updated to match the selected value. Please note that the framework also offers the possibility of having custom (non-native) select menus.</p>
		<p>To add a select menu to your page, start with a standard <code>select</code> element populated with a set of <code>option</code> elements. Set the <code>for</code> attribute of the <code>label</code> to match the <code>id</code> of the <code>select</code> so they are semantically associated. It's possible to <a href="../docs-forms.html">accessibly hide the label</a> if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.</p>
			
			<p>The framework will find all <code>select</code> elements and automatically enhance them into select menus, no need to apply a <code>data-role</code> attribute. To prevent the automatic enhancement of a select, add  <code>data-role="none"</code> attribute to the <code>select</code>.</p>
			
<pre><code>
&lt;label for=&quot;select-choice-0&quot; class=&quot;select&quot;&gt;Shipping method:&lt;/label&gt;
&lt;select name=&quot;select-choice-0&quot; id=&quot;select-choice-0&quot;&gt;
   &lt;option value=&quot;standard&quot;&gt;Standard: 7 day&lt;/option&gt;
   &lt;option value=&quot;rush&quot;&gt;Rush: 3 days&lt;/option&gt;
   &lt;option value=&quot;express&quot;&gt;Express: next day&lt;/option&gt;
   &lt;option value=&quot;overnight&quot;&gt;Overnight&lt;/option&gt;
&lt;/select&gt;
</code></pre>

			<p>This will produce a basic select menu. The default styles set the width of the input to 100% of the parent container and stacks the label on a separate line.</p>

        
        <h3>Mini version</h3>
        
        <p>For a more compact version that is useful in toolbars and tight spaces, add the <code>data-mini="true"</code> attribute to the element to create a <a href="../forms-all-mini.html">mini version</a>. </p>

<pre><code>	
&lt;label for=&quot;select-choice-min&quot; class=&quot;select&quot;&gt;Shipping method:&lt;/label&gt;
&lt;select name=&quot;select-choice-min&quot; id=&quot;select-choice-min&quot; <strong>data-mini=&quot;true&quot;</strong>&gt;
   &lt;option value=&quot;standard&quot;&gt;Standard: 7 day&lt;/option&gt;
   &lt;option value=&quot;rush&quot;&gt;Rush: 3 days&lt;/option&gt;
   &lt;option value=&quot;express&quot;&gt;Express: next day&lt;/option&gt;
   &lt;option value=&quot;overnight&quot;&gt;Overnight&lt;/option&gt;
&lt;/select&gt; 
</code></pre>
			
			<p>This will produce a select that a not as tall as the standard version and has a smaller text size.</p>
        
        <h3>Field containers</h3>
        
			<p>Optionally wrap the selects in a container with the <code>data-role="fieldcontain"</code> attribute to help visually group it in a longer form.</p>
<pre><code>
&lt;div data-role=&quot;fieldcontain&quot;&gt;
  &lt;label for=&quot;select-choice-1&quot; class=&quot;select&quot;&gt;Shipping method:&lt;/label&gt;
  &lt;select name=&quot;select-choice-1&quot; id=&quot;select-choice-1&quot;&gt;
    &lt;option value=&quot;standard&quot;&gt;Standard: 7 day&lt;/option&gt;
    &lt;option value=&quot;rush&quot;&gt;Rush: 3 days&lt;/option&gt;
    &lt;option value=&quot;express&quot;&gt;Express: next day&lt;/option&gt;
    &lt;option value=&quot;overnight&quot;&gt;Overnight&lt;/option&gt;
  &lt;/select&gt;
<strong>&lt;/div&gt;
</strong></code></pre>

<h3>Optgroups</h3>
<p>The following example organizes the options into <code>optgroup</code> elements. Support for this feature in mobile selects is a bit spotty, but is improving.</p>

<pre><code>
&lt;div data-role="fieldcontain"&gt;
  &lt;label for="select-choice-nc" class="select"&gt;Preferred delivery:&lt;/label&gt;
  &lt;select name="select-choice-8" id="select-choice-nc"&gt;
    &lt;optgroup label="FedEx"&gt;
      &lt;option value="firstOvernight"&gt;First Overnight&lt;/option&gt;
      &lt;option value="expressSaver"&gt;Express Saver&lt;/option&gt;
      &lt;option value="ground"&gt;Ground&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;optgroup label="UPS"&gt;
      &lt;option value="firstOvernight"&gt;First Overnight&lt;/option&gt;
      &lt;option value="expressSaver"&gt;Express Saver&lt;/option&gt;
      &lt;option value="ground"&gt;Ground&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;optgroup label="US Mail"&gt;
      &lt;option value="standard"&gt;Standard: 7 day&lt;/option&gt;
      &lt;option value="rush"&gt;Rush: 3 days&lt;/option&gt;
      &lt;option value="express"&gt;Express: next day (disabled)&lt;/option&gt;
      &lt;option value="overnight"&gt;Overnight&lt;/option&gt;
    &lt;/optgroup&gt;
  &lt;/select&gt;
&lt;/div&gt;
</code></pre>


		<h3>Vertically grouped select inputs</h3>

		<p>To create a grouped set of select inputs, first add <code>select</code> and a corresponding <code>label</code>. Set the <code>for</code> attribute of the <code>label</code> to match the <code>id</code> of the <code>select</code> so they are semantically associated.</p>

		<p>Because the <code>label</code> element will be associated with each individual select input, we recommend wrapping the selects in a <code>fieldset</code> element that has a <code>legend</code> which acts as the combined label for the grouped inputs.</p>

		<p>Lastly, one needs to wrap the <code>fieldset</code> in a <code>div</code> with <code> data-role="controlgroup"</code> attribute, so it can be styled as a group.</p>
			
<pre><code>	
&lt;div data-role=&quot;fieldcontain&quot;&gt;
&lt;fieldset data-role=&quot;controlgroup&quot;&gt;
	&lt;legend&gt;Date of Birth:&lt;/legend&gt;

    &lt;label for="select-choice-month">Month&lt;/label&gt;
&lt;select name="select-choice-month" id="select-choice-month"&gt;
	&lt;option&gt;Month&lt;/option&gt;
	&lt;option value="jan"&gt;January&lt;/option&gt;
	&lt;!-- etc. --&gt;
&lt;/select&gt;

	&lt;label for="select-choice-day">Day&lt;/label&gt;
&lt;select name="select-choice-day" id="select-choice-day"&gt;
	&lt;option&gt;Day&lt;/option&gt;
	&lt;option value="1"&gt;1&lt;/option&gt;
	&lt;!-- etc. --&gt;
&lt;/select&gt;

&lt;label for="select-choice-year">Year&lt;/label&gt;
&lt;select name="select-choice-year" id="select-choice-year"&gt;
	&lt;option&gt;Year&lt;/option&gt;
	&lt;option value="2011"&gt;2011&lt;/option&gt;
	&lt;!-- etc. --&gt;
&lt;/select&gt;
&lt;/fieldset&gt;
&lt;/div&gt;
</code></pre>


		<h3>Horizontally grouped select inputs</h3>
		<p>Select inputs can also be used for grouped sets with more than one related selections. To make a horizontal button set, add the <code>data-type="horizontal"</code> to the fieldset. Note that the buttons which trigger the select will resize depending on the currently selected optionâ€™s value. Note that browsers without support for <code>display: inline-block;</code> will group the selects vertically, as above.</p>

<code>
&lt;fieldset data-role="controlgroup" <strong>data-type="horizontal"</strong>&gt;
</code>

		<h3>Calling the select menu plugin</h3>
		<p>The select menu plugin will auto initialize on any page that contains a select menu, without any need for a <code>data-role</code> attribute in the markup. However, you can directly call the select menu plugin on any selector, just like any normal jQuery plugin:</p>

<pre><code>
$('select').selectmenu();			
</code></pre>
    </longdesc>
    <created>1.0</created>
    <options>
    	<option name="corners" default="true">
	    <desc>Applies the theme button border-radius to the select button if set to true. 
<pre><code>
$('select').selectmenu({ corners: "false" });
</code></pre>
		<p>This option is also exposed as a data attribute: <code>data-corners="false"</code>.</p>
		</desc>
	    <type name="Boolean" />
	  </option>
	  <option name="icon" default='"arrow-down"'>
	    <desc>Replaces the default icon "arrow-down" with an icon from the icon set. Setting this attribute to "false" suppresses the icon.

<pre><code>
$('select').selectmenu({ icon: "star" });
</code></pre>
			<p>To suppress the icon, a boolean expression must be used:</p>

<pre><code>
$('select').selectmenu({ icon: false });
</code></pre>
			<p>This option is also exposed as a data attribute: <code>data-icon="star"</code>.</p>
</desc>
	    	<type name="String" />
	  	</option>
	  	<option name="iconpos" default='"right"'>
	    	<desc>Position of the icon in the select button. Possible values: left, right, top, bottom, notext. The notext value will display the select as an icon-only button with no text feedback.
		<pre><code>
$('select').selectmenu({ iconpos: "left" });
</code></pre>

		<p>This option is also exposed as a data attribute: <code>data-iconpos="left"</code>.</p>
		</desc>
	    <type name="String" />
	</option>
	<option name="iconshadow" default="true">
	    	<desc>Applies the theme shadow to the select button if set to true.
		<pre><code>
$('select').selectmenu({ iconshadow: "false" });
</code></pre>

		<p>This option is also exposed as a data attribute: <code>data-iconshadow="false"</code>.</p>
		</desc>
	    <type name="Boolean" />
	</option>
<option name="initSelector" default="select:not(:jqmData(role='slider'))">
            <desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as select menus. To change which elements are initialized, bind this option to the mobileinit event:
                <pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.selectmenu.prototype.options.initSelector = ".myselect";
}); </code></pre>
                
                <p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
            </desc>
            <type name="CSS selector string" />
        </option>
		<option name="inline" default="null (false)">
	    	<desc>If set to true, this will make the select button act like an inline button so the width is determined by the button's text. By default, this is null (false) so the select button is full width, regardless of the feedback content. Possible values: true, false. 
		<pre><code>
$('select').selectmenu({ inline: true });
</code></pre>

		<p>This option is also exposed as a data attribute: <code>data-inline="true"</code>.</p>
		</desc>
	    <type name="Boolean" />
	</option>
        <option name="mini" default="false">
            <desc>Sets the size of the element to a more compact, mini version. 
                <pre><code>
$('select').selectmenu({ mini: true });</code></pre>
                
                <p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
            </desc>
            <type name="Boolean" />
        </option>
		<option name="nativeMenu" default="true">
	    	<desc>When set to true, clicking the custom-styled select menu will open the native select menu which is best for performance. If set to false, the custom select menu style will be used instead of the native menu. 
		<pre><code>
$('select').selectmenu({ nativeMenu: false });
</code></pre>

		<p>This option is also exposed as a data attribute: <code>data-native-menu="false"</code>.</p>
		</desc>
	    <type name="Boolean" />
	</option>
	<option name="preventFocusZoom" default="true on iOS platforms">
	    	<desc>This option disables page zoom temporarily when a custom select is focused, which prevents iOS devices from zooming the page into the select. By default, iOS often zooms into form controls, and the behavior is often unnecessary and intrusive in mobile-optimized layouts.
		<pre><code>
$('select').selectmenu({ nativeMenu: false });
</code></pre>

		<p>This option is also exposed as a data attribute: <code>data-prevent-focus-zoom="true"</code>.</p>
		</desc>
	    <type name="Boolean" />
	</option>
	<option name="shadow" default="true">
	    	<desc>Applies the drop shadow style to the select button if set to true. 
		<pre><code>
$('select').selectmenu({ shadow: false });
</code></pre>

		<p>This option is also exposed as a data attribute: <code>data-shadow="false"</code>.</p>
		</desc>
	    <type name="Boolean" />
	</option>
    </options>
    <events>
        <event name="create">
            <desc>triggered when a text input is created</desc>
            <pre><code>
$( ".selector" ).selectmenu({
   create: function(event, ui) { ... }
});
            </code></pre>
        </event>
    </events>
    <methods>
        <method name="close">
            <desc>close an open select menu.
                <pre><code>
$('select').selectmenu('close');</code></pre></desc>
        </method><method name="enable">
            <desc>enable a disabled text input.
                <pre><code>
$('select').selectmenu('enable'); </code></pre></desc>
        </method>
        <method name="disable">
            <desc>disable a text input.
                <pre><code>
$('select').selectmenu('disable'); </code></pre></desc>
        </method>
        <method name="open">
            <desc>open a closed select menu (custom menus only).
                <pre><code>
$('select').selectmenu('open'); </code></pre></desc>
       </method>
        <method name="refresh">
            <desc>update the custom select.<p>This is used to update the custom select to reflect the native select element's value.If the number of options in the select are different than the number of items in the custom menu, it'll rebuild the custom menu. Also, if you pass a true argument you can force the rebuild to happen. </p>
                <pre><code>
//refresh value			
$('select').selectmenu('refresh');

//refresh and force rebuild
$('select').selectmenu('refresh', true);</code></pre></desc>
        </method>
      </methods>
    <theming>
	  <theme name="overlayTheme" default='"a"'>
	    	<desc>Sets the color of the overlay layer for the dialog-based custom select menus and the outer border of the smaller custom menus. It accepts a single letter from a-z that maps to the swatches included in your theme. By default, the content block colors for swatch "a" will be used for the overlays.
		<pre><code>
$('select').selectmenu({ overlayTheme: "d" });
</code></pre>

		<p>This option is also exposed as a data attribute: <code>ui-body-d</code>.</p>
		</desc>
	    <type name="String" />
			</theme>
	        <theme name="theme" default="null, inherited from parent">
            <desc>Sets the color scheme (swatch) for all instances of this widget. It accepts a single letter from a-z that maps to the swatches included in your theme. By default, it will inherit the same swatch color as its parent container if not explicitly set.
                <pre><code>
$('select').selectmenu({ theme: "a" }); </code></pre>
                
                <p>Possible values: swatch letter (a-z).</p>
                <p>This option is also exposed as a data attribute: <code>data-theme="a"</code>.</p>
            </desc>
            <type name="String" />
        </theme>
    </theming>
    <example>
        <desc>A basic example of a simple native select</desc>
        <code><![CDATA[]]></code>
        <html><![CDATA[  <label for="select-choice-0" class="select">Shipping method:</label>
         <select name="select-choice-0" id="select-choice-0">
           <option value="standard">Standard: 7 day</option>
           <option value="rush">Rush: 3 days</option>
           <option value="express">Express: next day</option>
           <option value="overnight">Overnight</option>
         </select> ]]></html>
    </example>
    <category slug="widgets"/>
</entry>