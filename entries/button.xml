<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="button" namespace="fn" type="widget" widgetnamespace="mobile">
	<title>Button Widget</title>
    <desc>Creates a button widget</desc>
    <longdesc>
		<p>Buttons are coded with standard HTML anchor and input elements, then enhanced by jQuery Mobile to make them more attractive and useable on a mobile device.  Use anchor links (<code>a</code> elements) to mark up navigation buttons, and <code>input</code> or <code>button</code> elements for form submission.</p>
			
		<h3>Styling links as buttons</h3>
		<p>In the main content block of a page, you can style any anchor link as a button by adding the <code>data-role="button"</code> attribute. The framework will enhance the link with markup and classes to style the link as a button. For example, this markup: </p>

<pre><code>
&lt;a href=&quot;index.html&quot; data-role=&quot;button&quot;&gt;Link button&lt;/a&gt;
</code></pre>

		<p>Produces this <strong>link-based</strong> button:
		<iframe src="/resources/button/example1.html" style="width:100%;height:90px;border:0px"></iframe></p>
        
		<p><strong>Note:</strong> Links styled like buttons have all the same visual options as true form-based buttons below, but there are a few important differences. Link-based buttons aren't part of the <code>button</code> plugin and only just use the underlying <code>buttonMarkup</code> plugin to generate the button styles so the form button methods (enable, disable, refresh) aren't supported. If you need to disable a link-based button (or any element), it's possible to apply the disabled class ui-disabled yourself with JavaScript to achieve the same effect.</p>

<pre><code>
&lt;a href=&quot;index.html&quot; data-role=&quot;button&quot; class=&quot;ui-disabled&quot;&gt;Link button&lt;/a&gt;
</code></pre>		

		<p>Produces this disabled <strong>link-based</strong> button:
		<iframe src="/resources/button/example2.html" style="width:100%;height:90px;border:0px"></iframe>
		</p>
		
		<h3>Mini version</h3>
        
		<p>For a more compact version that is useful in toolbars and tight spaces, add the <code>data-mini="true"</code> attribute to the button to create a mini version. </p>

<pre><code>
&lt;a href=&quot;index.html&quot; data-role=&quot;button&quot; data-mini=&quot;true&quot;&gt;Link button&lt;/a&gt;
</code></pre>

		<p>This will produce a button that is not as tall as the standard version and has a smaller text size.
		<iframe src="/resources/button/example3.html" style="width:100%;height:90px;border:0px"></iframe>
		</p>
        
		<h3>Form buttons</h3>
        
		<p>For ease of styling, the framework automatically converts any <code>button</code> or <code>input</code> element with a <code>type</code> of <code>submit</code>, <code>reset</code>, or <code>button</code> into a custom styled button - there is no need to add the <code> data-role="button"</code> attribute. However, if needed, you can directly call the button plugin on any selector, just like any jQuery plugin:</p>

<pre><code>
$('[type="submit"]').button();
</code></pre>	

		<p><strong>Button</strong> based button:</p>
		
<pre><code>	
&lt;button&gt;Button element&lt;/button&gt;
</code></pre>

		<iframe src="/resources/button/example4.html" style="width:100%;height:90px;border:0px"></iframe>

		<p><strong>Input type="button"</strong> based button:</p>
<pre><code>	
&lt;input type=&quot;button&quot; value=&quot;Button&quot; /&gt;
</code></pre>

		<iframe src="/resources/button/example5.html" style="width:100%;height:90px;border:0px"></iframe>
		
		<p><strong>Input type="submit"</strong> based button:</p>
<pre><code>
&lt;input type=&quot;submit&quot; value=&quot;Submit Button&quot; /&gt;
</code></pre>

		<iframe src="/resources/button/example6.html" style="width:100%;height:90px;border:0px"></iframe>
			
		<p><strong>Input type="reset"</strong> based button:</p>
<pre><code>
&lt;input type=&quot;reset&quot; value=&quot;Reset Button&quot; /&gt;
</code></pre>
		
		<iframe src="/resources/button/example7.html" style="width:100%;height:90px;border:0px"></iframe>

        <h2>Adding Icons to Buttons</h2>
		<p>The jQuery Mobile framework includes a selected set of icons most often needed for mobile apps. To minimize download size, jQuery Mobile includes a single white icon sprite, and automatically adds a semi-transparent black circle behind the icon to ensure that it has good contrast on any background color.</p> 
		
			
			<p>An icon can be added to a button by adding a <code> data-icon</code> attribute on the anchor specifying the icon to display.  For example, the following markup:</p> 
			
<pre><code>
&lt;a href=&quot;index.html&quot; data-role=&quot;button&quot; data-icon=&quot;delete&quot;&gt;Delete&lt;/a&gt;
</code></pre>
			
			<p>Creates this button with an icon:
			<iframe src="/resources/button/example8.html" style="width:100%;height:90px;border:0px"></iframe></p>

			
			<p>A more compact button with the <code> data-mini="true"</code> attribute added to the button:
			<iframe src="/resources/button/example9.html" style="width:100%;height:90px;border:0px"></iframe></p>
			
			<h3>Icon set</h3>
			
			<p>The following <code> data-icon</code> attributes can be referenced to create the icons shown below:
			<iframe src="/resources/button/example10.html" style="width:100%;height:1640px;border:0px"></iframe></p>

	</longdesc>
	<added>1.0</added>
	<options>
    	<option name="disabled" default="false">
        	<desc>Sets the default state of the text input to disabled when "true".
<pre><code>
$('.selector').textinput({ disabled: true });
</code></pre>
			</desc>
            <type name="Boolean" />
        </option>
		<option name="initSelector" default="input[type='text'], input[type='search'], :jqmData(type='search'), input[type='number'], :jqmData(type='number'), input[type='password'], input[type='email'], input[type='url'], input[type='tel'], textarea, input:not([type])">
			<desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as textinputs. To change which elements are initialized, bind this option to the mobileinit event:
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.textinput.prototype.options.initSelector = ".myInputs";
}); 
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
			<type name="CSS selector string" />
		</option>
		<option name="mini" default="false">
			<desc>Sets the size of the element to a more compact, mini version. 
<pre><code>
$('.selector').textinput({ mini: true }); 
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
            <type name="Boolean" />
		</option>
		<option name="preventFocusZoom" default="true on iOS platforms">
			<desc>This option disables page zoom temporarily when a custom input is focused, which prevents iOS devices from zooming the page into the input. By default, iOS often zooms into form controls, and the behavior is often unnecessary and intrusive in mobile-optimized layouts.
<pre><code>
$('input').textinput({ preventFocusZoom: true });
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-prevent-focus-zoom="true"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="theme" default="null, inherited from parent">
			<desc>Sets the color scheme (swatch) for all instances of this widget. It accepts a single letter from a-z that maps to the swatches included in your theme. By default, it will inherit the same swatch color as its parent container if not explicitly set.
<pre><code>
$('.selector').textinput({ theme: "a" });
</code></pre>
				<p>Possible values: swatch letter (a-z).</p>
				<p>This option is also exposed as a data attribute: <code>data-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
	<events>
		<event name="create">
			<desc>triggered when a text input is created</desc>
<pre><code>
$( ".selector" ).textinput({
	create: function(event, ui) { ... }
});
</code></pre>
		</event>
	</events>
	<methods>
		<method name="enable">
			<desc>enable a disabled text input.
<pre><code>
$('.selector').textinput('enable');
</code></pre>
			</desc>
		</method>
		<method name="disable">
			<desc>disable a text input.
<pre><code>
$('.selector').textinput('disable');
</code></pre>
			</desc>
		</method>
	</methods>
	<example>
		<desc>A basic example of a search input field</desc>
		<code><![CDATA[]]></code>
		<html><![CDATA[	
    	<label for="basic">Text Input:</label>
        <input type="text" name="name" id="basic" value=""  /> ]]></html>
	</example>
	<category slug="widgets"/>
</entry>