<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="dialog" namespace="fn" type="Widget" widgetnamespace="mobile">
	<desc>Opens content in an interactive overlay.</desc>
	<longdesc>
		<p>Any page can be presented as a modal dialog by adding the <code>data-rel="dialog"</code> attribute to the page anchor link. When the "dialog" attribute is applied, the framework adds styles to add rounded corners, margins around the page and a dark background to make the "dialog" appear to be suspended above the page.</p>
	</longdesc>
	<created>1.0</created>
	<options>
	  <option name="data-transition" default='"pop"'>
	    <desc>Opens the dialog using the specified transition. (Note the recommended transitions for a more realistic dialog effect appear in bold).
	    <p>Possible values: fade, <b>pop</b>, <b>flip</b>, turn, flow, slidefade, slide, slideup, <b>slidedown</b>, none. </p>
	    </desc>
	    <type name="String" />
	  </option>		
	  <option name="closeBtnText" default='"Close"'>
	    <desc>Customizes the text of the close button which is helpful for translating this into different languages. This is displayed as an icon-only button by default so the text isn't visible on-screen, but is read by screen readers so this is an important accessibility feature.
			<p>This option is also exposed as a data attribute: <code>data-close-btn-text</code>.</p>
        </desc>
        <type name="String" />
	  </option>  
	  <option name="initSelector"  default='":jqmData(role=&#39;dialog&#39;)"'>
		<desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as dialogs. To change which elements are initialized, bind this option to the mobileinit event:
<code><pre>
$( document ).bind( "mobileinit", function(){
    $.mobile.dialog.prototype.options.initSelector = ".mydialog";
});</pre></code>
		</desc>
		<type name="CSS selector string" />
	  </option>
	</options>
	<events>
	<event name="create">
	<desc>Triggered when a dialog is created</desc>
	<code><pre>$( ".selector" ).dialog({
   create: function(event, ui) { ... }
});
</pre></code>
	</event>
	</events>
	<methods>
	  <method name="close">
	    <desc>Closes the dialog.</desc>
	  </method>		
	</methods>
	<theming>
	  <theme name="data-theme (as a data-attribute)">
	    <desc>Dialogs can be styled with different theme swatches, just like any page by adding <code>data-theme</code> attributes to the header, content, or footer containers. <p>Possible values: swatch letter (a-z)</p></desc>
	    <type name="String" />
	  </theme>
	 <theme name="overlayTheme" default='"a"'>
	   <desc>Dialogs appear to be floating above an overlay layer. This overlay adopts the swatch A content color by default, but the data-overlay-theme attribute can be added to the page wrapper to set the overlay to any swatch letter.<p> Possible values: swatch letter (a-z)</p>
	   <p>This option is also exposed as a data attribute: <code>data-overlay-theme</code>.</p>
	   </desc>
	   <type name="String" />
	 </theme>
	</theming>
	<example>
		<desc>A basic example of opening a page as a dialog by adding <code>data-rel="dialog"</code> to the anchor tag.</desc>
		<code><![CDATA[]]></code>
		<html><![CDATA[  <div data-role="header">
        <h2>Dialog Example 1</h2>
      </div>
      <div data-role="content">
        <a href="#dialogPage" data-rel="dialog">Open dialog</a>
      </div>
      <div data-role="footer">
        <h2></h2>
      </div>
    </div>
    <div data-role="page" id="dialogPage">
      <div data-role="header">
        <h2>Dialog</h2>
      </div>
      <div data-role="content">
        <p>I am a dialog</p>
      </div>]]></html>
	</example>
	<category slug="widgets"/>
</entry>
